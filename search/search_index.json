{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This plugin is provides some filament resources for :</p> <ul> <li>Roles</li> <li>Permissions</li> <li>Admin</li> <li>Edit Profile</li> <li>Setting</li> <li>SeoMeta</li> </ul> <p></p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>PHP 8.2</li> <li>Laravel 10</li> <li>Livewire 3</li> <li>Filament 3</li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>install filament package</p> <pre><code>composer require filament/filament:\"^3.1\"\n</code></pre> <p>you need to install package spatie permission and spatie media library to use this package</p> <pre><code>composer require spatie/laravel-permission:\"^6.3\"\nphp artisan vendor:publish --provider=\"Spatie\\Permission\\PermissionServiceProvider\"\n\ncomposer require spatie/laravel-medialibrary:\"^10.0\"\nphp artisan vendor:publish --provider=\"Spatie\\MediaLibrary\\MediaLibraryServiceProvider\"\n</code></pre> <p>then install filament-suitcms plugin package via composer:</p> <pre><code>composer require jhonoryza/filament-suitcms\n</code></pre> <p>install filament-suitcms plugin</p> <pre><code>php artisan filament-suitcms:install\n</code></pre> <p>this command will do :</p> <ol> <li>publish filament-suitcms config to folder <code>config/cms</code></li> <li>ask to run migration, if you get asked <code>Would you like to run the migrations now?</code> choose <code>yes</code>, this will run    migration for media and roles permission</li> <li>add default suitcms model</li> <li>sync permission data</li> <li>generate some policies</li> <li>generate default super admin user, default admin user is <code>admin@admin.com</code> with password : <code>password</code></li> <li>generate default setting data</li> </ol> <p>adjust <code>config/auth.php</code> add this</p> <pre><code>    'guards' =&gt; [\n        'cms' =&gt; [\n            'driver' =&gt; 'session',\n            'provider' =&gt; 'cms',\n        ],\n    ],\n\n    'providers' =&gt; [\n        'cms' =&gt; [\n            'driver' =&gt; 'eloquent',\n            'model' =&gt; App\\Models\\Admin::class,\n        ],\n    ],\n\n    'passwords' =&gt; [\n        'cms' =&gt; [\n            'provider' =&gt; 'cms',\n            'table' =&gt; 'admin_password_reset_tokens',\n            'expire' =&gt; 60,\n            'throttle' =&gt; 60,\n        ],\n    ],\n</code></pre> <p>now you can create filament panel builder using this command :</p> <pre><code>php artisan filament:install --panels\n</code></pre> <p>then open <code>PanelProvider</code> add this line</p> <pre><code>    public function panel(Panel $panel): Panel\n    {\n        return $panel\n            -&gt;plugin(SuitcmsToolkit::make()); // add this line\n    }\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#add-suitcmstoolkit-to-your-filament-panel-provider","title":"Add <code>SuitcmsToolkit</code> to your filament panel provider","text":"<p>add to your filament panel provider add this line</p> <pre><code>    public function panel(Panel $panel): Panel\n    {\n        return $panel\n            -&gt;plugin(SuitcmsToolkit::make()); // add this line\n    }\n</code></pre> <p>you can disable specific resource using this syntax</p> <pre><code>    public function panel(Panel $panel): Panel\n    {\n        return $panel\n            -&gt;plugin(\n                SuitcmsToolkit::make()\n                    -&gt;settingResource(condition: false);\n            )\n    }\n</code></pre> <p>this will disable setting resources</p> <p>another available function</p> <pre><code>SuitcmsToolkit::make()\n    -&gt;seoMetaResource(condition: false)\n    -&gt;permissionResource(condition: false)\n    -&gt;roleResource(condition: false)\n    -&gt;adminResource(condition: false)\n</code></pre>"},{"location":"usage/#register-default-resources-instead-using-suitcmstoolkit","title":"Register default resources instead using <code>SuitcmsToolkit</code>","text":"<p>you can register some resources like this</p> <pre><code>    $panel\n        -&gt;authGuard('cms')\n        -&gt;authPasswordBroker('cms')\n        -&gt;resources([\n            AdminResource::class,\n            RoleResource::class,\n            PermissionResource::class,\n            SeoMetaResource::class,\n            SettingResource::class,\n        ])\n        -&gt;profile(AdminResource\\Pages\\EditProfile::class);\n</code></pre>"},{"location":"usage/#generate-admin-user-command","title":"Generate Admin User Command","text":"<pre><code>php artisan cms:admin-generate\n</code></pre>"},{"location":"usage/#generate-permissions-command","title":"Generate Permissions Command","text":"<p>add new permission map in <code>config/cms/permission.php</code> file</p> <p>You can generate Permissions by running</p> <pre><code>php artisan cms:permission-sync\n</code></pre>"},{"location":"usage/#generate-policy-command","title":"Generate Policy Command","text":"<pre><code>php artisan cms:policy-generate\n</code></pre> <p>for admins, roles, permissions, settings and seo_metas resource the policy class already generated and loaded from the package, so you don't need to regenerate.</p>"},{"location":"usage/#important","title":"Important","text":"<p>you can add new permission to config file in <code>config/cms/permissions.php</code> file</p> <pre><code>&lt;?php\n\nreturn [\n    \\App\\Models\\Admin::class =&gt; ['view-any', 'view', 'create', 'update', 'delete', 'restore', 'force-delete'],\n    \\App\\Models\\Role::class =&gt; ['view-any', 'view', 'create', 'update', 'delete'],\n    \\App\\Models\\Permission::class =&gt; ['view-any', 'view', 'create', 'update', 'delete'],\n    \\App\\Models\\Setting::class =&gt; ['view-any', 'view', 'update', 'create', 'update', 'delete'],\n    \\App\\Models\\SeoMeta::class =&gt; ['view-any', 'view', 'update', 'create', 'update', 'delete'],\n];\n</code></pre> <p>then run generate permission and policy command to regenerate permission data and policy class</p> <p>if you didn't generate policy class your authorization will not work even though you have the correct permission and role data to the related admin.</p>"},{"location":"usage/#override-default-resources","title":"Override default resources","text":"<p>let's say we want to override <code>SettingResource</code></p> <p>first we need to disable like this</p> <pre><code>SuitcmsToolkit::make()\n    -&gt;settingResource(condition: false);\n</code></pre> <p>lets generate resource using <code>php artisan make:filament-resource -G Setting</code></p> <p>lets adjust <code>SettingResource</code> class to extend from <code>\\Fajar\\Filament\\Suitcms\\Resources\\SettingResource</code></p> <p>then we need to override this function</p> <pre><code>use App\\Filament\\Resources\\SettingResource\\Pages\\ListSettings;\nuse App\\Filament\\Resources\\SettingResource\\Pages\\CreateSetting;\nuse App\\Filament\\Resources\\SettingResource\\Pages\\EditSetting;\n\n    public static function getPages(): array\n    {\n        return [\n            'index' =&gt; ListSettings::route('/'),\n            'create' =&gt; CreateSetting::route('/create'),\n            'edit' =&gt; EditSetting::route('/{record}/edit'),\n        ];\n    }\n</code></pre>"},{"location":"usefully-package/","title":"Usefully Package","text":"<p>easily generate model, factory and migration : - https://blueprint.laravelshift.com/docs/installation/</p> <p>easily manage multiple language in database : - https://laravel-i18n.richan.id/package-installation</p>"},{"location":"advanced/multiple-language/","title":"Multiple language","text":"<p>We will use this package to manage database multiple language implementation</p> <pre><code>composer require richan-fongdasen/laravel-i18n:\"^3.2\"\n</code></pre> <p>full documentation is here</p>"},{"location":"advanced/multiple-language/#lets-try-an-example-create-a-posts","title":"lets try an example create a posts","text":"<p>form preview :</p> <p></p> <p>using blueprint package create <code>draft.yaml</code> file in root directory</p> <pre><code>models:\n  Post:\n    slug: string nullable\n    published_at: datetime nullable\n  PostTranslations:\n    post_id: unsigned big integer\n    locale: string\n    title: string\n    content: text\n    timestamps: false\n    relationships:\n      BelongsTo: Post\n</code></pre> <p>then run</p> <pre><code>php artisan blueprint:build draft.yml\n</code></pre> <p>this will generate migrations, models and factories file</p> <p>lets change <code>storage/i18n/languages.json</code> file content to this :</p> <pre><code>[\n    {\n        \"name\": \"English\",\n        \"language\": \"en\",\n        \"country\": \"US\"\n    },\n    {\n        \"name\": \"Indonesian\",\n        \"language\": \"id\",\n        \"country\": \"ID\"\n    }\n]\n</code></pre> <p>adjust <code>app/Models/Post</code> like this</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse RichanFongdasen\\I18n\\Contracts\\TranslatableModel;\nuse RichanFongdasen\\I18n\\Eloquent\\Concerns\\Translatable;\n\nclass Post extends Model implements TranslatableModel\n{\n    use HasFactory;\n    use Translatable;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'slug',\n        'published_at',\n    ];\n\n    /**\n     * The attributes that should be cast to native types.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'id' =&gt; 'integer',\n        'published_at' =&gt; 'datetime',\n    ];\n\n    protected array $translates = [\n        'title',\n        'content'\n    ];\n}\n</code></pre> <p>lets run</p> <pre><code>php artisan migrate\n</code></pre> <p>to generate <code>posts</code> and <code>post_translations</code> tables</p> <p>then run</p> <pre><code>php artisan make:filament-resource -G\n</code></pre> <p>type <code>Post</code> to generate post resources</p> <p>to create post translation data adjust class <code>app/Filament/Resources/PostResource.php</code>, edit form function like this :</p> <pre><code>public static function form(Form $form): Form\n{\n    return $form\n        -&gt;schema([\n            Tabs::make('lang')\n                -&gt;columnSpanFull()\n                -&gt;tabs([\n                    Tab::make('English')\n                        -&gt;schema([\n                            Forms\\Components\\TextInput::make('title.en')\n                                -&gt;label('Title')\n                                -&gt;required(),\n                            Forms\\Components\\RichEditor::make('content.en')\n                                -&gt;label('Content')\n                                -&gt;required()\n                                -&gt;maxLength(65535),\n                        ]),\n                    Tab::make('Indonesia')\n                        -&gt;schema([\n                            Forms\\Components\\TextInput::make('title.id')\n                                -&gt;label('Title')\n                                -&gt;required(),\n                            Forms\\Components\\RichEditor::make('content.id')\n                                -&gt;label('Content')\n                                -&gt;required()\n                                -&gt;maxLength(65535),\n                ]),\n            ]),\n            Forms\\Components\\TextInput::make('slug')\n                -&gt;columnSpanFull()\n                -&gt;required()\n                -&gt;maxLength(255),\n            Forms\\Components\\DateTimePicker::make('published_at')\n                -&gt;required(),\n        ]);\n}\n</code></pre> <p>to load post translation data when editing a post, you can change class <code>app/Filament/Resources/PostResource/Pages/EditPost.php</code> and add a function <code>mutateFormDataBeforeFill</code> like this :</p> <pre><code>protected function mutateFormDataBeforeFill(array $data): array\n{\n    $locales = app(I18nService::class)-&gt;getAllLocale();\n    $localeKey = config('i18n.language_key', 'language');\n\n    $attributes = $this-&gt;record-&gt;getTranslatableAttributes();\n    foreach ($locales as $item) {\n        $this-&gt;record-&gt;translateTo($item-&gt;{$localeKey});\n        foreach ($attributes as $attribute) {\n            $data[$attribute][$item-&gt;{$localeKey}] = $this-&gt;record-&gt;{$attribute};\n        }\n    }\n    return $data;\n}\n</code></pre>"}]}